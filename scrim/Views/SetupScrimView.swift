////
// SetupScrimView.swift
// scrim

// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.

// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <https://www.gnu.org/licenses/>.

// © 2025 Charles Choi.

import SwiftUI

extension AuthenticationWorkflow {
    struct SetupScrimView: View {
        @Environment(ScrimDefaults.self) var kvDefaults
        @State var authButtonDisabled: Bool = false
        @Binding var workflowState: AuthenticationWorkflowState

        @State var viewTitle = "Setup Scrim"

        var body: some View {
            VStack(alignment: .leading) {
                Text(viewTitle)
                    .font(.largeTitle)
                    .multilineTextAlignment(.leading)

                Text(genBodyText())
                    .font(.system(size: 14))
                    .multilineTextAlignment(.leading)
                    .lineSpacing(CGFloat(2))
                    .padding(EdgeInsets(top: 10, leading: 0, bottom: 20, trailing: 0))
                
                AuthFileButton(authButtonDisabled: $authButtonDisabled)

                Spacer()
                
                HStack {
                    Button(action: goBackWelcome) {
                        Label("Back: Welcome", systemImage: "chevron.backward")
                            .font(.title2)
                            .padding(EdgeInsets(top: 5, leading: 5, bottom: 5, trailing: 5))
                        
                    }
                    
                    Button(action: goBackTest) {
                        Label("Back: Test Server", systemImage: "chevron.backward")
                            .font(.title2)
                            .padding(EdgeInsets(top: 5, leading: 5, bottom: 5, trailing: 5))
                    }
                    Spacer()
                }
            }
            .padding(EdgeInsets(top: 15, leading: 20, bottom: 10, trailing: 20))
        }

        func goBackWelcome() {
            workflowState = .welcome
        }

        func goBackTest() {
            workflowState = .testServer

        }

        private func dismiss() {
            NSApplication.shared.keyWindow?.close()
        }


        func genBodyText() -> AttributedString {
            var srcText: [String]

            srcText = [
                ("Scrim requires access to a shared secret file that is generated by Emacs server. " +
                 "This file requires your permission for Scrim to access it.\n"),
                ("This path to this file is typically `<user‑emacs‑directory>/server/server` where " +
                 "`<user‑emacs‑directory>` is the location of your Emacs init file, `init.el`.\n"),
                "Tap on the button Choose Secret File to open a file browser to navigate and select this file."
            ]

            let bodyText = try! AttributedString(markdown: srcText.joined(separator: "  \n"),
                                                 options: .init(interpretedSyntax: .inlineOnlyPreservingWhitespace))
            return bodyText
        }
    }
}

#Preview {
    @Previewable @State var workflowState: AuthenticationWorkflow.AuthenticationWorkflowState = .setupScrim

    AuthenticationWorkflow.SetupScrimView(workflowState: $workflowState).environment(ScrimDefaults.shared)
}
